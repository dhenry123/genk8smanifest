apiVersion: 'apps/v1'
kind: 'Deployment'
metadata:
  name: '<%= namespace %>' 
  namespace: '<%= namespace %>' 
spec:
  revisionHistoryLimit: <%= global.revision || 1 %>
  <% if (global && global.strategy) { %>
  strategy:
    type: '<%= global.strategy %>'
  <% } %>
  selector:
    matchLabels:
      app: '<%= namespace %>' 
  replicas: <%= global.scale.replicas %>
  template: 
    metadata:
      labels:
        app: '<%= namespace %>' 
    spec:
      imagePullSecrets:<% registrysecrets.forEach(function(secret){ %>
      - name : '<%= secret %>'<% }); %>
      
      <% if (global.securitycontext) { %>securityContext:<% Object.getOwnPropertyNames(global.securitycontext).forEach(function(attr){ %>
        <%= attr %>: <%= global.securitycontext[attr] %><% }); %>
      <% } %>
      <% if (global.nodeaffinity && Array.isArray(global.nodeaffinity)) { %>affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:<% global.nodeaffinity.forEach(function(nodeaffinity){ %>
              - key: '<%= nodeaffinity.key %>'
                operator: In
                values:
                - '<%= nodeaffinity.value %>'<% }); %><% }; %>
      containers:<% containers.forEach(function(container){ %>
      - name: '<%= container.name %>'
        env:<% global.env.forEach(function(env){ %>
          - name: '<%= env.key %>'
            valueFrom : 
              secretKeyRef:
                name: '<%= namespace %>-secret-envvars'
                key: '<%= env.key %>'
                optional: false<% }); %>
        <% if (container.imagepullpolicy.match(/latest$/)) { %># lastest is here to be confortable :) but it's not a good practise<% }%>
        image: '<%= container.image %>:<%= container.tag ? container.tag : 'latest' %>'
        imagePullPolicy: '<%= container.imagepullpolicy %>'
        <% if (container.probes) { %>
          <% Object.getOwnPropertyNames(container.probes).forEach(function(probe){ %>  
        <%= probe %>Probe:
          <% if (["exec","http"].includes(container.probes[probe].method)) { %>
            <% if (container.probes[probe].method === 'exec') { %>
          command:
          <% container.probes[probe].action.split(' ').forEach(function(item){ %>
            - <%= item %>
            <% }) %>
            <% } %>

            <% if (container.probes[probe].method === 'http') { %>
          httpGet:
            path: '<%= container.probes[probe].path %>'
            port: <%= container.probes[probe].port %>
            <% if (container.probes[probe].scheme) { %>scheme: '<%= container.probes[probe].scheme %>'<% } %>
            <% } %>
          <% if (container.probes[probe].initdelay) {%>initialDelaySeconds: <%= container.probes[probe].initdelay %><% } %>
          <% if (container.probes[probe].period) {%>periodSeconds: <%= container.probes[probe].period %><% } %>
          <% if (container.probes[probe].timeout) {%>timeoutSeconds: <%= container.probes[probe].timeout %><% } %>
          <% if (container.probes[probe].success) {%>successThreshold: <%= container.probes[probe].success %><% } %>
          <% if (container.probes[probe].failure) {%>failureThreshold: <%= container.probes[probe].failure %><% } %>
            <% } %>
          <% }) %>
        <% } %>
        securityContext:
          <% if (container.readonly && (!container.securitycontext || !container.securitycontext.readOnlyRootFilesystem )) { %>readOnlyRootFilesystem: true<% }; %>
          <% if (container.securitycontext) { %>
          <% Object.keys(container.securitycontext).forEach(function(key){ %>
          <%= key %>: <%= container.securitycontext[key] %>
          <% }); %>
          <% }; %>
        ports:<% container.services.forEach(function(service){ %>
          - containerPort: <%= service.targetport %>
            protocol: '<%= service.protocol ? service.protocol : "TCP" %>'
            name : 'port-<%= service.targetport %>'<% }); %>
        
        <% if (container.volumes.length ) { %>volumeMounts:<% container.volumes.forEach(function(volume){ %>
          - mountPath: '<%= volume.mount %>'
            name: '<%= volume.manifestvolumename %>'
            <% if (volume.srctype === "file" && volume.existingdir) { %>subPath: '<%= volume.subpath %>'<% } %>
            <% }); %><% } %>
        <% }); %>
            
      <% if (deploymentvolumes) { %>volumes:<% deploymentvolumes.forEach(function(volume){ %>
        - name: '<%= volume.manifestvolumename %>'
          <% if (!volume.tempfs) { %>persistentVolumeClaim:
            claimName: 'claimref-gluster-pv-<%= namespace %>-<%= volume.name %>'
          <% }else if(volume.srctype === "file" && volume.existingdir){ %>
          configMap:
            name: '<%= volume.configmapname %>'
          <% }else{ %>
          emptyDir: {}
          <%}});} %>
---